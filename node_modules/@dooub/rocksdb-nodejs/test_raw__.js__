const leveldown = require('./leveldown');


const location = './testfolder/';
const db = leveldown(location);
db.open((err) => {
    console.log('opened', err);
    db.createColumnFamily("testa", (err) => {
        console.log('column family created', err);
        db.putWithColumnFamily('testa', 'key', 'value', (err) => {
            console.log('column family putted', err);
            db.getWithColumnFamily('testa', 'key', {asBuffer: false}, (err, value) => {
                console.log('column family getted', err, value);
                db.delWithColumnFamily('testa', 'key', (err) => {
                    console.log('column family delled', err);
                    var batch = db.batch()
                    batch.putWithColumnFamily('testa', 'a', 1)
                    batch.putWithColumnFamily('testa', 'b', 1)
                    batch.putWithColumnFamily('testa', 'c', 1)
                    batch.putWithColumnFamily('testa', 'd', 1)
                    batch.putWithColumnFamily('testa', 'e', 1)
                    batch.putWithColumnFamily('testa', 'f', 1)
                    batch.putWithColumnFamily('testa', 'g', 1)
                    batch.write(function (err) {
                        var ite = db.iterator({columnFamily: 'testa'})
                        console.log('batch() completed', err );
                        ite.next(function (err, key, value) {
                            console.log(err, 'no error from next()')
                            console.log(key.toString(), 'a', 'key matches')
                            console.log(ite.cache.length, 0, 'no cache')
                            ite.next(function (err, key, value) {
                                console.log(err, 'no error from next()')
                                console.log(key.toString(), 'b', 'key matches')
                                console.log(ite.cache.length > 0, 'has cached items')
                                ite.seek('d')
                                console.log(ite.cache, 'cache is removed')
                                ite.next(function (err, key, value) {
                                    console.log(err, 'no error from next()')
                                    console.log(key.toString(), 'd', 'key matches')
                                    console.log(ite.cache.length, 0, 'no cache')
                                    ite.next(function (err, key, value) {
                                        console.log(err, 'no error from next()')
                                        console.log(key.toString(), 'e', 'key matches')
                                        console.log(ite.cache.length > 0, 'has cached items')
                                        ite.end((err) => {
                                            console.log('iterator ends');
                                            db.dropColumnFamily('testa', (err) => {
                                                console.log('column family dropped', err);
                                                db.close((err) => {
                                                    console.log('closed', err);
                                                });
                                            })
                                        });
                                    })
                                })
                            })
                        })
                    });
                });
            });
        })
    } )
});
